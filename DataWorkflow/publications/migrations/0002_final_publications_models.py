# Generated by Django 3.0.3 on 2020-04-22 15:11

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('publications', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='Code assigned by the funder to a sponsered award (grant).', max_length=50)),
                ('uri', models.URLField(blank=True, help_text='The URI leading to a page provided by the funder for more information about the award (grant).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DateType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Type of date.', max_length=50)),
                ('information', models.CharField(blank=True, help_text='Free text information about a date.', max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FunderIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Unique identifier of a funding entity, according to various types.', max_length=200)),
                ('type', models.CharField(blank=True, help_text='Type of the funder identifier.', max_length=50, null=True)),
                ('scheme_uri', models.URLField(blank=True, help_text='URI of the funder identifier scheme.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RelatedIdentifierType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Type of related identifier', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='RelationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Description of relationship between resource being registered and related resource.', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceTypeGeneral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Type of a resource', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='TitleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Type of title.', max_length=50)),
            ],
        ),
        migrations.RemoveField(
            model_name='publication',
            name='creator',
        ),
        migrations.AddField(
            model_name='creator',
            name='publication',
            field=models.ForeignKey(default='', help_text='Publication in which this creator has been involved or authored.', on_delete=django.db.models.deletion.PROTECT, to='publications.Publication'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='publication',
            name='format',
            field=models.CharField(blank=True, help_text='Technical format of a resource.', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='publication',
            name='publication_year',
            field=models.IntegerField(default='2016', help_text='The year when the data was or will be made publicly available. In the case of resources such as software or dynamic data where there may be multiple releases in one year, include the Date/dateType/dateInformation property and sub-properties to provide more information about the publication or release date details. Format: YYYY. If an embargo period has been in effect, use the date when the embargo period ends. In the case of datasets, "publish" is understood to mean making the 15 data available on a specific date to the community of researchers. If there is no standard publication year value, use the date that would be preferred from a citation perspective. ', validators=[django.core.validators.MinValueValidator(2016), django.core.validators.MaxValueValidator(2050)]),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='publication',
            name='publisher',
            field=models.CharField(default='', help_text='The name of the entity that holds, archives, publishes prints, distributes, releases, issues, or produces the resource. This property will be used to formulate the citation, so consider the prominence of the role. For software, use Publisher for the code repository. If there is an entity other than a code repository, that "holds, archives, publishes, prints, distributes, releases, issues, or produces" the code, use the property Contributor/contributorType/hostingInstitution for the code repository.', max_length=500),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='publication',
            name='size',
            field=models.CharField(blank=True, help_text='Size of resource, free text to include data volume, pages, time etc.', max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='publication',
            name='version',
            field=models.CharField(blank=True, help_text='Version number of the resource.', max_length=10, null=True),
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name or title of a resource.', max_length=500)),
                ('publication', models.ForeignKey(help_text='Publication named by the title.', on_delete=django.db.models.deletion.PROTECT, to='publications.Publication')),
                ('type', models.ForeignKey(blank=True, help_text='Type of title.', null=True, on_delete=django.db.models.deletion.PROTECT, to='publications.TitleType')),
            ],
        ),
        migrations.CreateModel(
            name='Rights',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statement', models.TextField(help_text='Rights information for a resource.', max_length=1000)),
                ('uri', models.URLField(blank=True, help_text='URI of the license', null=True)),
                ('identifier', models.CharField(help_text='Short, standardised version of the license name.', max_length=20)),
                ('identifier_scheme', models.CharField(blank=True, help_text='Name of the scheme', max_length=50, null=True)),
                ('scheme_uri', models.URLField(blank=True, help_text='URI of rights identifier scheme', null=True)),
                ('publication', models.ForeignKey(help_text='Publication to which the rights relate.', on_delete=django.db.models.deletion.PROTECT, to='publications.Publication')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='Free text description of a resource, preferably one term, description of the resource that can be combined with the sub-property.', max_length=50)),
                ('type_general', models.OneToOneField(help_text='General type of a resource.', on_delete=django.db.models.deletion.PROTECT, to='publications.ResourceTypeGeneral')),
            ],
        ),
        migrations.CreateModel(
            name='RelatedIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Uniquely identifies an item according to various schemas.', max_length=200)),
                ('publication', models.ForeignKey(help_text='Publication to which the identifier relates.', on_delete=django.db.models.deletion.PROTECT, to='publications.Publication')),
                ('related_identifier_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='publications.RelatedIdentifierType')),
                ('relation_type', models.ForeignKey(help_text='Description of relationship between resource being registered and related resource.', on_delete=django.db.models.deletion.PROTECT, to='publications.RelationType')),
            ],
        ),
        migrations.CreateModel(
            name='FundingReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('funder_name', models.CharField(help_text='Name of the funding provider.', max_length=200)),
                ('award_title', models.CharField(blank=True, help_text='Human readable name or title of the award (grant).', max_length=500, null=True)),
                ('award_number', models.OneToOneField(blank=True, help_text='The code assigned by the funder to a sponsored award (grant).', null=True, on_delete=django.db.models.deletion.PROTECT, to='publications.Award')),
                ('funder_identifier', models.OneToOneField(blank=True, help_text='Unique identifier of a funding entity, according to various types.', null=True, on_delete=django.db.models.deletion.PROTECT, to='publications.FunderIdentifier')),
                ('publication', models.ForeignKey(help_text='Publication to which the funding relates.', on_delete=django.db.models.deletion.PROTECT, to='publications.Publication')),
            ],
        ),
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date relevant to the work.')),
                ('publication', models.ForeignKey(help_text='Publication to which the date is relevant.', on_delete=django.db.models.deletion.PROTECT, to='publications.Publication')),
                ('type', models.ForeignKey(help_text='Type of date', on_delete=django.db.models.deletion.PROTECT, to='publications.DateType')),
            ],
        ),
        migrations.AddField(
            model_name='publication',
            name='resource_type',
            field=models.OneToOneField(default='', help_text='Description of the resource.', on_delete=django.db.models.deletion.PROTECT, to='publications.ResourceType'),
            preserve_default=False,
        ),
    ]
